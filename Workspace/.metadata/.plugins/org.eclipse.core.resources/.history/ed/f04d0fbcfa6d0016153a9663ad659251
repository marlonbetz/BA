import numpy as np
from sklearn.cluster import AffinityPropagation
from scipy.stats import gaussian_kde
from scipy.stats import multivariate_normal as mvn
from scipy.spatial.distance import cosine,euclidean
import sys
X = np.random.normal(0,.05,(20,2))
X = np.append(X,np.random.normal(0.01,0.006,(15,2)),axis=0)
X = np.append(X,np.random.normal(0.01,0.002,(5,2)),axis=0)
X = np.append(X,np.random.normal(0.04,0.002,(4,2)),axis=0)
X = np.append(X,np.random.normal(0.07,.01,(20,2)),axis=0)

#X_p = np.random.normal(0,1,(10000,2))
# X_p = np.append(X,np.random.normal(1,0.3,(500,2)),axis=0)
# X_p = np.append(X,np.random.normal(4,1.5,(2000,2)),axis=0)


print("size X",len(X))
#kernel = gaussian_kde(X_p.T)

pref = [(-(mvn.pdf(x,[0,0],[[1,0],[0,1]])))*100 for x in X]

alpha = 200
dists = np.array([
                  -(
                    euclidean(
                            u/(alpha*-np.log(mvn.pdf(u,[0,0],[[1,0],[0,1]]))),
                             v/(alpha*-np.log(mvn.pdf(v,[0,0],[[1,0],[0,1]])))
                              )
                    
#                     (
#                       (-np.log(mvn.pdf(u,[0,0],[[1,0],[0,1]]))
#                       +(-np.log(mvn.pdf(v,[0,0],[[1,0],[0,1]])))
#                       )
#                     )
                ) for u in X for v in X]).reshape((len(X),len(X)))

ap = AffinityPropagation(affinity = "precomputed",
                            #preference=pref
                             )
labels  =ap.fit_predict(dists)
print("n labels", len(set(labels)))
import matplotlib.pyplot as plt
cmap = dict((label,np.random.beta(1,1,3)) for label in labels)
for x,label in zip(X,labels):
    plt.scatter(x[0],x[1],color=cmap[label])
plt.show()