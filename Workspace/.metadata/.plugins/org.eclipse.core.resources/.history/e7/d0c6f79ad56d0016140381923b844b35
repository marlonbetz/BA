import matplotlib.pyplot as plt
from pipeline import *



print("READ CORPUS FROM ASJP DUMP")            
pathToASJPCorpusFile = "Data/ASJP/dataset.tab"
languages_train,words_train,concepts_train,geo_info_train = loadASJP(pathToASJPCorpusFile)

print("VECTORIZE TRAINING WORDS")
padToMaxLength = 15
bpf = BinaryPhonemeFeatures()
X_train = np.array([bpf.encodeWord(word, padToMaxLength=padToMaxLength).flatten() for word in words_train])


if embeddings.shape[1] != 2:
    print("tsne")
    tsne = TSNE(2)
    embeddings_transformed = tsne.fit_transform(embeddings)
else:
    embeddings_transformed = embeddings

print("plotting")
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style("white")
cmap = sns.color_palette("hls", 15)

#n = len(embeddings_transformed)
n = 10
bins = dict()
for i,word in enumerate(allWords[:n]):
    l = np.min([15,len(getListofASJPPhonemes(word))])
    if l not in bins:
        bins[l] = []
    bins[l].append(i)

for length in bins:
    plt.scatter(embeddings_transformed[bins[length],0],embeddings_transformed[bins[length],1],color=cmap[length-1],alpha=0.1,label=str(length))
plt.legend(title="word length",frameon=True)
#for word, emb in zip(allWords[:n],embeddings_transformed):
#    l = np.min([15,len(getListofASJPPhonemes(word))])
#    plt.scatter(emb[0],emb[1],alpha=0.1,color=cmap[l-1])   
#plt.scatter(embeddings_transformed[:n,0],embeddings_transformed[:n,1],alpha=0.1)
#seaborn.kdeplot(embeddings_transformed[:n,0],embeddings_transformed[:n,1])
        

plt.show()